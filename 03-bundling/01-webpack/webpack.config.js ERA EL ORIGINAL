const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

module.exports = {
  context: path.resolve(__dirname, "./src"),
  resolve: {
    extensions: [".js", ".ts",".tsx"],
  },
  entry: {
    app: "./index.tsx",
    //appStyles: "./averageComponentStyles.scss",//mejor como import en su .jsx correspondiente
    // appStyles: "./src/styles.css",
    vendorStyles: ['../node_modules/bootstrap/dist/css/bootstrap.css']//contexto src, entonces a este le llamamos desde ../node_mod...blabla
  },
  output: {
    filename: "[name].[chunkhash].js",
    path: path.resolve(__dirname, "dist"),
    clean: true,
  },
  module: {
    rules: [
      // {
      //   test: /\.jsx?$/,
      //   exclude: /node_modules/,
      //   loader: "babel-loader",
      // },
      {
        test: /\.tsx?$/,
        exclude: /node_modules/,
        loader: "babel-loader",
      },
      {
        test: /\.css$/,//No haría falta si solo curramos con scss
        //exclude: /node_modules/,//OJO solo si usamos bootstrap, no excluimos node_modules
        use: ["style-loader", "css-loader"],
      },
      {
        test: /\.scss$/,//
        exclude: /node_modules/,//
        // use: ["style-loader", "css-loader", "sass-loader"],//3 pasos, de ultimo a primero para dev, a pelo
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: "css-loader",
            options: {
              modules: {
                exportLocalsConvention: "camelCase",
                localIdentName: "[name]__[local]--[hash:base64:5]"
              },
            },
          },
          "sass-loader"
        ],//Igual, con miniCss para produccion
      },
      {
        test: /\.(png|svg|jpg|jpeg|gif)$/i,
        type: "asset/resource",
      },
      {
        test: /\.html$/,
        exclude: /node_modules/,
        loader: "html-loader",
      },
    ],
  },
  devServer: {
    port: 8080,
    devMiddleware: { stats: "errors-only"}
  },
  devtool: "eval-source-map",
  plugins: [
    new HtmlWebpackPlugin({
      template: "./index.html",
      filename: "index.html",
      scriptLoading: "blocking",
      //hash: true,//No necesario, hemos incluido "chunkhash" en el output{} de más arriba.
    }),
    new MiniCssExtractPlugin(),
  ],
};